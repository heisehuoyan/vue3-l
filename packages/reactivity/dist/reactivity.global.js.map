{"version":3,"file":"reactivity.global.js","sources":["../../shared/src/index.ts","../src/effect.ts","../src/basehandlers.ts","../src/reactive.ts"],"sourcesContent":["export const isObject = (value) => typeof value == \"object\" && value != null;\nexport const extend = Object.assign; // 合并\n","// 我们需要让这个effect变成响应的effect，可以做到数据变化的时候执行\nexport function effect(fn, options: any = {}) {\n  const effect = createReativitveEffect(fn, options);\n\n  if (!options.lazy) {\n    effect(fn, options); //响应式的effect 默认先执行一边\n  }\n\n  return effect;\n}\n\nlet uid = 0; // 标示每个effect\nlet activeEffect; //存储当前的effect\nconst effectStack = [];\nfunction createReativitveEffect(fn, options) {\n  const effect = function reativitveEffect(fn, options) {\n    if (!effectStack.includes(effect)) {\n      // 保证effect没有加入到effectStack中，解决特殊情况2\n      try {\n        // 函数执行时可能发生异常\n        effectStack.push(effect); // 入栈\n        activeEffect = effect;\n        return fn(); // 默认第一次执行,函数执行时取值，会执行get方法，让属性和effect产生关联，收集effects\n      } finally {\n        effectStack.pop(); // 出栈，\n        activeEffect = effectStack[effectStack.length - 1]; //即每次取数组最后一个\n      }\n    }\n  };\n  effect.id = uid++; // 制作一个effect标识，用于区分effect\n  effect.isEffect = true; // 用户标识这个是响应式effect\n  effect.raw = fn; // 保存effect对应原本函数\n  effect.options = options; // 保存选项\n  return effect;\n}\n\nconst targetMap = new WeakMap(); // 映射表\n\n// 让某个对象中的属性收集当前他对应的effect函数\nexport function track(target, type, key) {\n  //activeEffect; // 可以拿到当前的effect\n  //activeEffect 并不是收集所有，activeEffect有才收集\n  if (activeEffect === undefined) {\n    return;\n  }\n  // activeEffect有值，说明此属性在effect中使用，不在effect中使用的不需要收集依赖\n  let depsMap = targetMap.get(target); // 取值，取到的是一个map，即value:name=>[effect,effect]\n  if (!depsMap) {\n    // 如果某个对象不存在这个值\n    targetMap.set(target, (depsMap = new Map())); // 没有就把value往里放\n  }\n  let dep = depsMap.get(key); // 取值，即{name=>set}，检查map中有没有name属性，即重复的属性，一个effect可能对应多个属性\n  if (!dep) {\n    depsMap.set(key, (dep = new Set())); // 没有，则增加\n  }\n  if (!dep.has(activeEffect)) {\n    // 如果set中没有当前的effect，则加进去\n    dep.add(activeEffect);\n  }\n  debugger;\n  console.log(targetMap);\n}\n\n//{name:'lcj',age:12} name->name可能对应两个effect，即[effect,effect]\n// 某个对象中某个属性对应的effect\n// 对象作为key weakMap\n//weakMap=>key:{name:'lcj',age:12} ，value:name=>[effect,effect]即也是一个map,map中的key是那么，值是一个set，{name=>set}\n\n// 特殊情况3\n// effect(()=>{ // 一个effect可能对应多个属性\n//   state.name  state.name  state.name\n// })\n\n//特殊情况1,,,,函数调用是一个栈型结构：effectStack，函数执行前入栈，执行完之后出栈    ：保证每个属性收集的effect是对的\n// effect(()=>{\n//   state.name='33', ->effect1\n//   effect(()=>{->effect2\n//     StaticRange.arguments.n=10\n//   }),\n//   state.ad=4444 ->effect2，但是其实是effect1\n// })\n\n// 情况2 ，++后持续执行effect，不停的刷新，，，， 思路：在栈中判断是否已经存在了该effect\n// effect(()=>{\n// state.count++\n// })\n","import { extend, isObject } from \"@vue/shared/src\";\nimport { reacdonly, reactive } from \"./reactive\";\nimport { track } from \"./effect\";\n\n// 实现拦截方法\n// 是不是仅读，仅读的属性set报异常\n// 是不是深度的\n\nfunction createGetter(isReadonly = false, isShallow = false) {\n  // 取值的时候通过代理对象去取：let proxy =reactive(),通过proxy去取，取值触发get方法\n  // receiver 代理对象本身 //其实就是proxy\n  return function get(target, key, receiver) {\n    //proxy +Reflect  Reflect好处：后续object上的方法会被迁移到Reflect ，比如 object.getProptypeof\n    // 以前target[key]=value 方式设置值可能会失败，并不会报异常，也没有返回值标志，但Reflect可以，Reflect方法具备返回值\n    //Reflect（es6）可以不使用proxy，\n    const res = Reflect.get(target, key, receiver); // 等价于target[key] // 固定的api ，反射，去proxy取值，它就吧原来的目标的值反射回去\n\n    if (!isReadonly) {\n      track(target, TrackOpType.GET, key); // 执行effect时会取值，收集effect\n      // 不是仅读的，收集依赖，等数据变化后更新视图\n    }\n\n    if (isShallow) {\n      //浅的，直接返回，不用做处理，浅的只代理第一层\n      return res;\n    }\n\n    if (isObject(res)) {\n      //vue2是一上来递归，vue3是当取值的时候进行代理，vue3的代理模式是懒代理\n      return isReadonly ? reacdonly(res) : reactive(res); // 递归\n    }\n    return res;\n  };\n} // 拦截获取功能\n\nfunction createSetter(isShallow = false) {\n  // 设置值时触发set方法\n  return function set(target, key, value, receiver) {\n    const result = Reflect.set(target, key, value, receiver); // 等价于 target[key] =value\n\n    // 当数据更新时，通知对应属性的effect重新执行\n    //todo\n    return result;\n  };\n} // 拦截设置功能\n\nconst get = createGetter();\nconst shallowGet = createGetter(false, true);\nconst readonlyGet = createGetter(true);\nconst shallowReadonlyGet = createGetter(true, true);\n\nconst set = createSetter();\nconst shallowSet = createSetter(true);\n\nexport const mutableHandlers = {\n  get,\n  set,\n};\n\nexport const shallowReativeHandlers = {\n  get: shallowGet,\n  set: shallowSet,\n};\n\nlet readonlyObj = {\n  set: (target, key) => {\n    console.warn(`set on key ${key} failed`);\n    return true;\n  },\n};\n\nexport const reacdonlyHandlers = extend(\n  {\n    get: readonlyGet,\n  },\n  readonlyObj\n);\nexport const shallowReacdonlyhandlers = extend(\n  {\n    get: shallowReadonlyGet,\n  },\n  readonlyObj\n);\n","import { isObject } from \"@vue/shared/src\";\nimport {\n  mutableHandlers,\n  shallowReativeHandlers,\n  reacdonlyHandlers,\n  shallowReacdonlyhandlers,\n} from \"./basehandlers\";\n\nexport function reactive(target) {\n  return createReativeObject(target, false, mutableHandlers);\n}\nexport function shallowReactive(target) {\n  return createReativeObject(target, false, shallowReativeHandlers);\n}\nexport function reacdonly(target) {\n  return createReativeObject(target, true, reacdonlyHandlers);\n}\nexport function shallowReacdonly(target) {\n  return createReativeObject(target, true, shallowReacdonlyhandlers);\n}\n\n// 创建两个存储空间\nconst reactiveMap = new WeakMap(); // 会自动回收，不会造成内存泄漏，存储key只能是对象\nconst reacdonlyMap = new WeakMap();\n\n// 拦截的方式不同\n// 是不是仅读，是不是深度，柯里化 new Proxy最核心是的就是拦截数据的读取和更改   get set\n\n/**\n *\n * @param target // 目标对象\n * @param isReadonly //是否仅读\n * @param baseHandles //拦截函数\n */\nfunction createReativeObject(target, isReadonly, baseHandles) {\n  // 如果目标不是对象，没法拦截，reactive这个api只能拦截对象类型\n  if (!isObject(target)) return target;\n\n  // 如果某个对象已经被代理过了，就不要再代理了 。。 代理了就直接吧代理过的结果直接返回，可能一个对象被代理深度，又被仅读代理\n\n  const proxyMap = isReadonly ? reacdonlyMap : reactiveMap; //代理的映射表\n\n  const exitProxy = proxyMap.get(target); //判断是否被代理\n  if (exitProxy) return exitProxy; // 如果已经被代理了，就直接返回结果\n\n  const proxy = new Proxy(target, baseHandles);\n  proxyMap.set(target, proxy); // 缓存proxy,表示target被代理了，：将代理对象和对应的结果缓存起来\n\n  return proxy;\n}\n"],"names":[],"mappings":"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"}